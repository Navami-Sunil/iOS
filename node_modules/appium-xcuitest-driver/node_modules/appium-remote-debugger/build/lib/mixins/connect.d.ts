/**
 * @typedef {Object} AppPages
 * @property {string} appIdKey
 * @property {Record<string, any>} pageDict
 */
/**
 * @typedef {Object} App
 * @property {string} id
 * @property {string} bundleId
 */
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<void>}
 */
export function setConnectionKey(this: import("../remote-debugger").RemoteDebugger): Promise<void>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {number} [timeout=APP_CONNECT_TIMEOUT_MS]
 * @returns {Promise<import('@appium/types').StringRecord>}
 */
export function connect(this: import("../remote-debugger").RemoteDebugger, timeout?: number | undefined): Promise<import("@appium/types").StringRecord>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<void>}
 */
export function disconnect(this: import("../remote-debugger").RemoteDebugger): Promise<void>;
/**
 * @typedef {Object} Page
 * @property {string} url
 * @property {string} title
 * @property {number} id
 * @property {boolean} isKey
 * @property {string} [bundleId]
 */
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string?} currentUrl
 * @param {number} [maxTries]
 * @param {boolean} [ignoreAboutBlankUrl]
 * @returns {Promise<Page[]>}
 */
export function selectApp(this: import("../remote-debugger").RemoteDebugger, currentUrl?: string | null, maxTries?: number | undefined, ignoreAboutBlankUrl?: boolean | undefined): Promise<Page[]>;
export class selectApp {
    /**
     * @typedef {Object} Page
     * @property {string} url
     * @property {string} title
     * @property {number} id
     * @property {boolean} isKey
     * @property {string} [bundleId]
     */
    /**
     *
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {string?} currentUrl
     * @param {number} [maxTries]
     * @param {boolean} [ignoreAboutBlankUrl]
     * @returns {Promise<Page[]>}
     */
    constructor(this: import("../remote-debugger").RemoteDebugger, currentUrl?: string | null, maxTries?: number | undefined, ignoreAboutBlankUrl?: boolean | undefined);
    appIdKey: string | undefined;
}
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string?} currentUrl
 * @param {number} maxTries
 * @param {boolean} ignoreAboutBlankUrl
 * @returns {Promise<AppPages?>}
 */
export function searchForApp(this: import("../remote-debugger").RemoteDebugger, currentUrl: string | null, maxTries: number, ignoreAboutBlankUrl: boolean): Promise<AppPages | null>;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Record<string, any>} appsDict
 * @param {string?} currentUrl
 * @param {boolean} [ignoreAboutBlankUrl]
 * @returns {AppPages?}
 */
export function searchForPage(this: import("../remote-debugger").RemoteDebugger, appsDict: Record<string, any>, currentUrl?: string | null, ignoreAboutBlankUrl?: boolean | undefined): AppPages | null;
/**
 *
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string|number} appIdKey
 * @param {string|number} pageIdKey
 * @param {boolean} [skipReadyCheck]
 * @returns {Promise<void>}
 */
export function selectPage(this: import("../remote-debugger").RemoteDebugger, appIdKey: string | number, pageIdKey: string | number, skipReadyCheck?: boolean | undefined): Promise<void>;
export class selectPage {
    /**
     *
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {string|number} appIdKey
     * @param {string|number} pageIdKey
     * @param {boolean} [skipReadyCheck]
     * @returns {Promise<void>}
     */
    constructor(this: import("../remote-debugger").RemoteDebugger, appIdKey: string | number, pageIdKey: string | number, skipReadyCheck?: boolean | undefined);
    appIdKey: string;
    pageIdKey: string | number;
}
export type AppPages = {
    appIdKey: string;
    pageDict: Record<string, any>;
};
export type App = {
    id: string;
    bundleId: string;
};
export type Page = {
    url: string;
    title: string;
    id: number;
    isKey: boolean;
    bundleId?: string | undefined;
};
//# sourceMappingURL=connect.d.ts.map