/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {string} appIdKey
 * @param {Record<string, any>} pageDict
 * @returns {Promise<void>}
 */
export function onPageChange(this: import("../remote-debugger").RemoteDebugger, err: Error | null, appIdKey: string, pageDict: Record<string, any>): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {Promise<void>}
 */
export function onAppConnect(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: Record<string, any>): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {void}
 */
export function onAppDisconnect(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: Record<string, any>): void;
export class onAppDisconnect {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Error?} err
     * @param {Record<string, any>} dict
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: Record<string, any>);
    appIdKey: string | undefined;
    connected: boolean | undefined;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} dict
 * @returns {Promise<void>}
 */
export function onAppUpdate(this: import("../remote-debugger").RemoteDebugger, err: Error | null, dict: Record<string, any>): Promise<void>;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} drivers
 * @returns {void}
 */
export function onConnectedDriverList(this: import("../remote-debugger").RemoteDebugger, err: Error | null, drivers: Record<string, any>): void;
export class onConnectedDriverList {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Error?} err
     * @param {Record<string, any>} drivers
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").RemoteDebugger, err: Error | null, drivers: Record<string, any>);
    connectedDrivers: any;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} state
 * @returns {void}
 */
export function onCurrentState(this: import("../remote-debugger").RemoteDebugger, err: Error | null, state: Record<string, any>): void;
export class onCurrentState {
    /**
     * @this {import('../remote-debugger').RemoteDebugger}
     * @param {Error?} err
     * @param {Record<string, any>} state
     * @returns {void}
     */
    constructor(this: import("../remote-debugger").RemoteDebugger, err: Error | null, state: Record<string, any>);
    currentState: any;
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {Error?} err
 * @param {Record<string, any>} apps
 * @returns {Promise<void>}
 */
export function onConnectedApplicationList(this: import("../remote-debugger").RemoteDebugger, err: Error | null, apps: Record<string, any>): Promise<void>;
//# sourceMappingURL=message-handlers.d.ts.map