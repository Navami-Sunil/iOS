"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.launchSafari = launchSafari;
exports.startTimeline = startTimeline;
exports.stopTimeline = stopTimeline;
exports.startConsole = startConsole;
exports.stopConsole = stopConsole;
exports.startNetwork = startNetwork;
exports.stopNetwork = stopNetwork;
exports.overrideUserAgent = overrideUserAgent;
exports.garbageCollect = garbageCollect;
const utils_1 = require("../utils");
const bluebird_1 = __importDefault(require("bluebird"));
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const GARBAGE_COLLECT_TIMEOUT_MS = 5000;
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<void>}
 */
async function launchSafari() {
    await this.requireRpcClient().send('launchApplication', {
        bundleId: SAFARI_BUNDLE_ID
    });
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {(event: import('@appium/types').StringRecord) => any} fn
 * @returns {Promise<any>}
 */
async function startTimeline(fn) {
    this.log.debug('Starting to record the timeline');
    this.requireRpcClient().on('Timeline.eventRecorded', fn);
    return await this.requireRpcClient().send('Timeline.start', {
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey,
    });
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {Promise<any>}
 */
async function stopTimeline() {
    this.log.debug('Stopping to record the timeline');
    await this.requireRpcClient().send('Timeline.stop', {
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey,
    });
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {(event: import('@appium/types').StringRecord) => any} listener
 * @returns {void}
 */
function startConsole(listener) {
    this.log.debug('Starting to listen for JavaScript console');
    this.addClientEventListener('Console.messageAdded', listener);
    this.addClientEventListener('Console.messageRepeatCountUpdated', listener);
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {void}
 */
function stopConsole() {
    this.log.debug('Stopping to listen for JavaScript console');
    this.removeClientEventListener('Console.messageAdded');
    this.removeClientEventListener('Console.messageRepeatCountUpdated');
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {(event: import('@appium/types').StringRecord) => any} listener
 * @returns {void}
 */
function startNetwork(listener) {
    this.log.debug('Starting to listen for network events');
    this.addClientEventListener('NetworkEvent', listener);
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @returns {void}
 */
function stopNetwork() {
    this.log.debug('Stopping to listen for network events');
    this.removeClientEventListener('NetworkEvent');
}
// Potentially this does not work for mobile safari
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {string} value
 * @returns {Promise<any>}
 */
async function overrideUserAgent(value) {
    this.log.debug('Setting overrideUserAgent');
    return await this.requireRpcClient().send('Page.overrideUserAgent', {
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey,
        value
    });
}
/**
 * @this {import('../remote-debugger').RemoteDebugger}
 * @param {number} [timeoutMs=GARBAGE_COLLECT_TIMEOUT_MS]
 * @returns {Promise<void>}
 */
async function garbageCollect(timeoutMs = GARBAGE_COLLECT_TIMEOUT_MS) {
    this.log.debug(`Garbage collecting with ${timeoutMs}ms timeout`);
    try {
        (0, utils_1.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });
    }
    catch (err) {
        this.log.debug(`Unable to collect garbage at this time`);
        return;
    }
    try {
        await bluebird_1.default.resolve(this.requireRpcClient().send('Heap.gc', {
            appIdKey: this.appIdKey,
            pageIdKey: this.pageIdKey,
        })).timeout(timeoutMs);
        this.log.debug(`Garbage collection successful`);
    }
    catch (e) {
        if (e instanceof bluebird_1.default.TimeoutError) {
            this.log.debug(`Garbage collection timed out after ${timeoutMs}ms`);
        }
        else {
            this.log.debug(`Unable to collect garbage: ${e.message}`);
        }
    }
}
//# sourceMappingURL=misc.js.map