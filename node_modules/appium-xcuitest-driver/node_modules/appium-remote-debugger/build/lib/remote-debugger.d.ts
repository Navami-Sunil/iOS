export const REMOTE_DEBUGGER_PORT: 27753;
export const RPC_RESPONSE_TIMEOUT_MS: 5000;
export class RemoteDebugger extends EventEmitter<[never]> {
    /** @type {string} */
    static EVENT_PAGE_CHANGE: string;
    /** @type {string} */
    static EVENT_DISCONNECT: string;
    /** @type {string} */
    static EVENT_FRAMES_DETACHED: string;
    /**
     * @param {RemoteDebuggerOptions} opts
     */
    constructor(opts?: RemoteDebuggerOptions);
    /** @type {string[]|undefined} */
    _skippedApps: string[] | undefined;
    /** @type {Record<string, any>} */
    _clientEventListeners: Record<string, any>;
    /** @type {Record<string, any>} */
    appDict: Record<string, any>;
    /** @type {string|null|undefined} */
    appIdKey: string | null | undefined;
    /** @type {string|number|null|undefined} */
    pageIdKey: string | number | null | undefined;
    /** @type {Record<string, any>[]|undefined} */
    connectedDrivers: Record<string, any>[] | undefined;
    /** @type {Record<string, any>[]|undefined} */
    currentState: Record<string, any>[] | undefined;
    /** @type {boolean|undefined} */
    connected: boolean | undefined;
    /** @type {import('bluebird')<void>} */
    pageLoadDelay: import("bluebird")<void>;
    /** @type {import('bluebird')<void>} */
    navigationDelay: import("bluebird")<void>;
    /** @type {import('./rpc/rpc-client').RpcClient?} */
    rpcClient: import("./rpc/rpc-client").RpcClient | null;
    /** @type {string|undefined} */
    pageLoadStrategy: string | undefined;
    /** @type {import('@appium/types').AppiumLogger} */
    _log: import("@appium/types").AppiumLogger;
    setConnectionKey: typeof connectMixins.setConnectionKey;
    disconnect: typeof connectMixins.disconnect;
    searchForApp: typeof connectMixins.searchForApp;
    searchForPage: typeof connectMixins.searchForPage;
    checkPageIsReady: typeof navigationMixins.checkPageIsReady;
    cancelPageLoad: typeof navigationMixins.cancelPageLoad;
    waitForDom: typeof navigationMixins.waitForDom;
    execute: typeof executeMixins.execute;
    executeAtom: typeof executeMixins.executeAtom;
    executeAtomAsync: typeof executeMixins.executeAtomAsync;
    isPageLoadingCompleted: typeof navigationMixins.isPageLoadingCompleted;
    selectApp: typeof connectMixins.selectApp;
    connect: typeof connectMixins.connect;
    selectPage: typeof connectMixins.selectPage;
    navToUrl: typeof navigationMixins.navToUrl;
    getCookies: typeof cookieMixins.getCookies;
    setCookie: typeof cookieMixins.setCookie;
    deleteCookie: typeof cookieMixins.deleteCookie;
    captureScreenshot: typeof screenshotMixins.captureScreenshot;
    addClientEventListener: typeof eventMixins.addClientEventListener;
    removeClientEventListener: typeof eventMixins.removeClientEventListener;
    launchSafari: typeof miscellaneousMixins.launchSafari;
    startTimeline: typeof miscellaneousMixins.startTimeline;
    stopTimeline: typeof miscellaneousMixins.stopTimeline;
    startConsole: typeof miscellaneousMixins.startConsole;
    stopConsole: typeof miscellaneousMixins.stopConsole;
    startNetwork: typeof miscellaneousMixins.startNetwork;
    stopNetwork: typeof miscellaneousMixins.stopNetwork;
    overrideUserAgent: typeof miscellaneousMixins.overrideUserAgent;
    garbageCollect: typeof miscellaneousMixins.garbageCollect;
    onPageChange: typeof messageHandlerMixins.onPageChange;
    onConnectedApplicationList: typeof messageHandlerMixins.onConnectedApplicationList;
    onAppConnect: typeof messageHandlerMixins.onAppConnect;
    onAppDisconnect: typeof messageHandlerMixins.onAppDisconnect;
    onAppUpdate: typeof messageHandlerMixins.onAppUpdate;
    onConnectedDriverList: typeof messageHandlerMixins.onConnectedDriverList;
    onCurrentState: typeof messageHandlerMixins.onCurrentState;
    frameDetached: typeof navigationMixins.frameDetached;
    bundleId: string | undefined;
    additionalBundleIds: string[];
    platformVersion: string | undefined;
    isSafari: boolean;
    includeSafari: boolean;
    useNewSafari: boolean;
    pageLoadMs: number | undefined;
    garbageCollectOnExecute: boolean;
    host: string | undefined;
    port: number;
    socketPath: string | undefined;
    remoteDebugProxy: string | undefined;
    pageReadyTimeout: number;
    logAllCommunication: boolean;
    logAllCommunicationHexDump: boolean;
    socketChunkSize: number | undefined;
    webInspectorMaxFrameLength: number | undefined;
    fullPageInitialization: boolean | undefined;
    _lock: AsyncLock;
    /**
     * @returns {import('@appium/types').AppiumLogger}
     */
    get log(): import("@appium/types").AppiumLogger;
    /**
     * @param {boolean} [checkConnected=false]
     * @returns {import('./rpc/rpc-client').RpcClient}
     */
    requireRpcClient(checkConnected?: boolean | undefined): import("./rpc/rpc-client").RpcClient;
    /**
     * @returns {void}
     */
    setup(): void;
    pageLoading: boolean | undefined;
    _navigatingToPage: boolean | undefined;
    /**
     * @param {boolean} allow
     */
    set allowNavigationWithoutReload(allow: boolean);
    /**
     * @returns {boolean}
     */
    get allowNavigationWithoutReload(): boolean;
    /**
     * @returns {void}
     */
    teardown(): void;
    /**
     * @returns {void}
     */
    initRpcClient(): void;
    /**
     * @returns {boolean}
     */
    get isConnected(): boolean;
    _allowNavigationWithoutReload: boolean | undefined;
    /**
     * @returns {string[]}
     */
    get skippedApps(): string[];
}
export default RemoteDebugger;
export type RemoteDebuggerOptions = {
    /**
     * id of the app being connected to
     */
    bundleId?: string | undefined;
    /**
     * array of possible bundle
     * ids that the inspector could return
     */
    additionalBundleIds?: string[] | undefined;
    /**
     * version of iOS
     */
    platformVersion?: string | undefined;
    isSafari?: boolean | undefined;
    includeSafari?: boolean | undefined;
    /**
     * for web inspector, whether this is a new Safari instance
     */
    useNewSafari?: boolean | undefined;
    /**
     * the time, in ms, that should be waited for page loading
     */
    pageLoadMs?: number | undefined;
    /**
     * the remote debugger's host address
     */
    host?: string | undefined;
    /**
     * the remote debugger port through which to communicate
     */
    port?: number | undefined;
    socketPath?: string | undefined;
    pageReadyTimeout?: number | undefined;
    remoteDebugProxy?: string | undefined;
    garbageCollectOnExecute?: boolean | undefined;
    logFullResponse?: boolean | undefined;
    /**
     * log plists sent and received from Web Inspector
     */
    logAllCommunication?: boolean | undefined;
    /**
     * log communication from Web Inspector as hex dump
     */
    logAllCommunicationHexDump?: boolean | undefined;
    /**
     * The maximum size in bytes of a single data
     * frame in the device communication protocol
     */
    webInspectorMaxFrameLength?: number | undefined;
    /**
     * size, in bytes, of chunks of data sent to
     * Web Inspector (real device only)
     */
    socketChunkSize?: number | undefined;
    fullPageInitialization?: boolean | undefined;
    pageLoadStrategy?: string | undefined;
    log?: import("@appium/types").AppiumLogger | undefined;
};
import { EventEmitter } from 'events';
import * as connectMixins from './mixins/connect';
import * as navigationMixins from './mixins/navigate';
import * as executeMixins from './mixins/execute';
import * as cookieMixins from './mixins/cookies';
import * as screenshotMixins from './mixins/screenshot';
import * as eventMixins from './mixins/events';
import * as miscellaneousMixins from './mixins/misc';
import * as messageHandlerMixins from './mixins/message-handlers';
import AsyncLock from 'async-lock';
//# sourceMappingURL=remote-debugger.d.ts.map